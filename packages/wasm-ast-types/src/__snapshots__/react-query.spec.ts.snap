// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createReactQueryHooks 1`] = `
"export interface Sg721CollectionInfoQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<CollectionInfoResponse, Error, CollectionInfoResponse, (string | undefined)[]>;
}
export function useSg721CollectionInfoQuery({
  client,
  options
}: Sg721CollectionInfoQuery) {
  return useQuery<CollectionInfoResponse, Error, CollectionInfoResponse, (string | undefined)[]>([\\"sg721CollectionInfo\\", client.contractAddress], () => client.collectionInfo(), options);
}
export interface Sg721MinterQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<MinterResponse, Error, MinterResponse, (string | undefined)[]>;
}
export function useSg721MinterQuery({
  client,
  options
}: Sg721MinterQuery) {
  return useQuery<MinterResponse, Error, MinterResponse, (string | undefined)[]>([\\"sg721Minter\\", client.contractAddress], () => client.minter(), options);
}
export interface Sg721AllTokensQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<AllTokensResponse, Error, AllTokensResponse, (string | undefined)[]>;
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useSg721AllTokensQuery({
  client,
  args,
  options
}: Sg721AllTokensQuery) {
  return useQuery<AllTokensResponse, Error, AllTokensResponse, (string | undefined)[]>([\\"sg721AllTokens\\", client.contractAddress], () => client.allTokens({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface Sg721TokensQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<TokensResponse, Error, TokensResponse, (string | undefined)[]>;
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSg721TokensQuery({
  client,
  args,
  options
}: Sg721TokensQuery) {
  return useQuery<TokensResponse, Error, TokensResponse, (string | undefined)[]>([\\"sg721Tokens\\", client.contractAddress], () => client.tokens({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }), options);
}
export interface Sg721AllNftInfoQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<AllNftInfoResponse, Error, AllNftInfoResponse, (string | undefined)[]>;
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721AllNftInfoQuery({
  client,
  args,
  options
}: Sg721AllNftInfoQuery) {
  return useQuery<AllNftInfoResponse, Error, AllNftInfoResponse, (string | undefined)[]>([\\"sg721AllNftInfo\\", client.contractAddress], () => client.allNftInfo({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
export interface Sg721NftInfoQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<NftInfoResponse, Error, NftInfoResponse, (string | undefined)[]>;
  args: {
    tokenId: string;
  };
}
export function useSg721NftInfoQuery({
  client,
  args,
  options
}: Sg721NftInfoQuery) {
  return useQuery<NftInfoResponse, Error, NftInfoResponse, (string | undefined)[]>([\\"sg721NftInfo\\", client.contractAddress], () => client.nftInfo({
    tokenId: args.tokenId
  }), options);
}
export interface Sg721ContractInfoQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<ContractInfoResponse, Error, ContractInfoResponse, (string | undefined)[]>;
}
export function useSg721ContractInfoQuery({
  client,
  options
}: Sg721ContractInfoQuery) {
  return useQuery<ContractInfoResponse, Error, ContractInfoResponse, (string | undefined)[]>([\\"sg721ContractInfo\\", client.contractAddress], () => client.contractInfo(), options);
}
export interface Sg721NumTokensQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<NumTokensResponse, Error, NumTokensResponse, (string | undefined)[]>;
}
export function useSg721NumTokensQuery({
  client,
  options
}: Sg721NumTokensQuery) {
  return useQuery<NumTokensResponse, Error, NumTokensResponse, (string | undefined)[]>([\\"sg721NumTokens\\", client.contractAddress], () => client.numTokens(), options);
}
export interface Sg721AllOperatorsQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<AllOperatorsResponse, Error, AllOperatorsResponse, (string | undefined)[]>;
  args: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSg721AllOperatorsQuery({
  client,
  args,
  options
}: Sg721AllOperatorsQuery) {
  return useQuery<AllOperatorsResponse, Error, AllOperatorsResponse, (string | undefined)[]>([\\"sg721AllOperators\\", client.contractAddress], () => client.allOperators({
    includeExpired: args.includeExpired,
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }), options);
}
export interface Sg721ApprovalsQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<ApprovalsResponse, Error, ApprovalsResponse, (string | undefined)[]>;
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721ApprovalsQuery({
  client,
  args,
  options
}: Sg721ApprovalsQuery) {
  return useQuery<ApprovalsResponse, Error, ApprovalsResponse, (string | undefined)[]>([\\"sg721Approvals\\", client.contractAddress], () => client.approvals({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
export interface Sg721ApprovalQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<ApprovalResponse, Error, ApprovalResponse, (string | undefined)[]>;
  args: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  };
}
export function useSg721ApprovalQuery({
  client,
  args,
  options
}: Sg721ApprovalQuery) {
  return useQuery<ApprovalResponse, Error, ApprovalResponse, (string | undefined)[]>([\\"sg721Approval\\", client.contractAddress], () => client.approval({
    includeExpired: args.includeExpired,
    spender: args.spender,
    tokenId: args.tokenId
  }), options);
}
export interface Sg721OwnerOfQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<OwnerOfResponse, Error, OwnerOfResponse, (string | undefined)[]>;
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721OwnerOfQuery({
  client,
  args,
  options
}: Sg721OwnerOfQuery) {
  return useQuery<OwnerOfResponse, Error, OwnerOfResponse, (string | undefined)[]>([\\"sg721OwnerOf\\", client.contractAddress], () => client.ownerOf({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}"
`;

exports[`createReactQueryHooks 2`] = `
"export interface Sg721CollectionInfoQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<CollectionInfoResponse, Error, CollectionInfoResponse, (string | undefined)[]>;
}
export function useSg721CollectionInfoQuery({
  client,
  options
}: Sg721CollectionInfoQuery) {
  return useQuery<CollectionInfoResponse, Error, CollectionInfoResponse, (string | undefined)[]>([\\"sg721CollectionInfo\\", client.contractAddress], () => client.collectionInfo(), options);
}
export interface Sg721MinterQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<MinterResponse, Error, MinterResponse, (string | undefined)[]>;
}
export function useSg721MinterQuery({
  client,
  options
}: Sg721MinterQuery) {
  return useQuery<MinterResponse, Error, MinterResponse, (string | undefined)[]>([\\"sg721Minter\\", client.contractAddress], () => client.minter(), options);
}
export interface Sg721AllTokensQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<AllTokensResponse, Error, AllTokensResponse, (string | undefined)[]>;
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useSg721AllTokensQuery({
  client,
  args,
  options
}: Sg721AllTokensQuery) {
  return useQuery<AllTokensResponse, Error, AllTokensResponse, (string | undefined)[]>([\\"sg721AllTokens\\", client.contractAddress], () => client.allTokens({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface Sg721TokensQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<TokensResponse, Error, TokensResponse, (string | undefined)[]>;
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSg721TokensQuery({
  client,
  args,
  options
}: Sg721TokensQuery) {
  return useQuery<TokensResponse, Error, TokensResponse, (string | undefined)[]>([\\"sg721Tokens\\", client.contractAddress], () => client.tokens({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }), options);
}
export interface Sg721AllNftInfoQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<AllNftInfoResponse, Error, AllNftInfoResponse, (string | undefined)[]>;
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721AllNftInfoQuery({
  client,
  args,
  options
}: Sg721AllNftInfoQuery) {
  return useQuery<AllNftInfoResponse, Error, AllNftInfoResponse, (string | undefined)[]>([\\"sg721AllNftInfo\\", client.contractAddress], () => client.allNftInfo({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
export interface Sg721NftInfoQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<NftInfoResponse, Error, NftInfoResponse, (string | undefined)[]>;
  args: {
    tokenId: string;
  };
}
export function useSg721NftInfoQuery({
  client,
  args,
  options
}: Sg721NftInfoQuery) {
  return useQuery<NftInfoResponse, Error, NftInfoResponse, (string | undefined)[]>([\\"sg721NftInfo\\", client.contractAddress], () => client.nftInfo({
    tokenId: args.tokenId
  }), options);
}
export interface Sg721ContractInfoQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<ContractInfoResponse, Error, ContractInfoResponse, (string | undefined)[]>;
}
export function useSg721ContractInfoQuery({
  client,
  options
}: Sg721ContractInfoQuery) {
  return useQuery<ContractInfoResponse, Error, ContractInfoResponse, (string | undefined)[]>([\\"sg721ContractInfo\\", client.contractAddress], () => client.contractInfo(), options);
}
export interface Sg721NumTokensQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<NumTokensResponse, Error, NumTokensResponse, (string | undefined)[]>;
}
export function useSg721NumTokensQuery({
  client,
  options
}: Sg721NumTokensQuery) {
  return useQuery<NumTokensResponse, Error, NumTokensResponse, (string | undefined)[]>([\\"sg721NumTokens\\", client.contractAddress], () => client.numTokens(), options);
}
export interface Sg721AllOperatorsQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<AllOperatorsResponse, Error, AllOperatorsResponse, (string | undefined)[]>;
  args: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSg721AllOperatorsQuery({
  client,
  args,
  options
}: Sg721AllOperatorsQuery) {
  return useQuery<AllOperatorsResponse, Error, AllOperatorsResponse, (string | undefined)[]>([\\"sg721AllOperators\\", client.contractAddress], () => client.allOperators({
    includeExpired: args.includeExpired,
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }), options);
}
export interface Sg721ApprovalsQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<ApprovalsResponse, Error, ApprovalsResponse, (string | undefined)[]>;
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721ApprovalsQuery({
  client,
  args,
  options
}: Sg721ApprovalsQuery) {
  return useQuery<ApprovalsResponse, Error, ApprovalsResponse, (string | undefined)[]>([\\"sg721Approvals\\", client.contractAddress], () => client.approvals({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
export interface Sg721ApprovalQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<ApprovalResponse, Error, ApprovalResponse, (string | undefined)[]>;
  args: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  };
}
export function useSg721ApprovalQuery({
  client,
  args,
  options
}: Sg721ApprovalQuery) {
  return useQuery<ApprovalResponse, Error, ApprovalResponse, (string | undefined)[]>([\\"sg721Approval\\", client.contractAddress], () => client.approval({
    includeExpired: args.includeExpired,
    spender: args.spender,
    tokenId: args.tokenId
  }), options);
}
export interface Sg721OwnerOfQuery {
  client: Sg721QueryClient;
  options?: UseQueryOptions<OwnerOfResponse, Error, OwnerOfResponse, (string | undefined)[]>;
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSg721OwnerOfQuery({
  client,
  args,
  options
}: Sg721OwnerOfQuery) {
  return useQuery<OwnerOfResponse, Error, OwnerOfResponse, (string | undefined)[]>([\\"sg721OwnerOf\\", client.contractAddress], () => client.ownerOf({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}"
`;
